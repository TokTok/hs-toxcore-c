load("@ai_formation_hazel//tools:mangling.bzl", "hazel_library")
load("@rules_haskell//haskell:defs.bzl", "haskell_binary", "haskell_library")
load("//third_party/haskell/hspec-discover:build_defs.bzl", "hspec_test")
load("//tools/project:build_defs.bzl", "project")

VERSION = "0.2.11"

project(
    # TODO(iphydf): Make this package standard travis.
    standard_travis = False,
    version = VERSION,
)

haskell_library(
    name = "hs-toxcore-c",
    srcs = glob(["src/**/*.*hs"]),
    compiler_flags = ["-Wno-unused-imports"],
    src_strip_prefix = "src",
    version = VERSION,
    visibility = ["//visibility:public"],
    deps = [
        "//c-toxcore",
        hazel_library("base"),
        hazel_library("bytestring"),
        hazel_library("data-default-class"),
    ],
)

haskell_binary(
    name = "groupbot",
    srcs = ["tools/groupbot/Main.hs"],
    compiler_flags = ["-Wno-unused-imports"],
    src_strip_prefix = "tools/groupbot",
    deps = [
        ":hs-toxcore-c",
        hazel_library("base"),
        hazel_library("base16-bytestring"),
        hazel_library("bytestring"),
        hazel_library("directory"),
    ],
)

hspec_test(
    name = "testsuite",
    timeout = "short",
    compiler_flags = ["-Wno-unused-imports"],
    deps = [
        ":hs-toxcore-c",
        hazel_library("QuickCheck"),
        hazel_library("base"),
        hazel_library("base16-bytestring"),
        hazel_library("bytestring"),
        hazel_library("bytestring-arbitrary"),
        hazel_library("data-default-class"),
        hazel_library("hspec"),
        hazel_library("saltine"),
    ],
)
